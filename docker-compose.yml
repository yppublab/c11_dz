services:
  nat:
    hostname: nat
    build: ./nat
    container_name: nat
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      uplink_net:
      nat_net:
        ipv4_address: 192.168.99.254
    volumes:
      - ./nat/iptables.rules:/etc/iptables/rules.v4:ro
    command: ["/bin/sh", "/entrypoint.sh"]
    extra_hosts: [ "host.docker.internal:host-gateway" ]
    ports:
      - "80:80"
      - "1832:1832"
      - "7000:7000"

  fw:
    hostname: fw
    depends_on:
      - nat
    build: ./fw
    container_name: fw
    privileged: true
    cap_add: [ "NET_ADMIN" ]
    restart: always
    sysctls:
      net.ipv4.ip_forward: 1    
    networks:
      nat_net:
        ipv4_address: 192.168.99.2
      users_net:
        ipv4_address: 192.168.101.254
      dmz_net:
        ipv4_address: 192.168.102.254
      servers_net:
        ipv4_address: 192.168.103.254
      admin_net:
        ipv4_address: 192.168.104.254      
    volumes:
      - ./fw/nftables.conf:/etc/nftables.conf:rw
      # Из-за flush ruleset ломается внутренний DNS-сервис 127.0.0.11 контейнера,
      # поэтому надо вручную назначить корпоративный DNS-сервер
      - ./fw/etc/resolv.conf:/etc/resolv.conf:ro
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - GATEWAY_IP=192.168.103.254

  srv_web:
    hostname: srv_web
    depends_on: [ fw ]
    image: alpine:3.20
    container_name: srv_web
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      dmz_net:
        ipv4_address: 192.168.102.10
    volumes:
      - ./www:/usr/share/nginx/html:ro
      - ./srv_web/start.sh:/start.sh:ro
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw
      - ./srv_web/log.txt:/log.txt:ro
      - ./srv_web/log:/etc/nginx/http.d/zz-server.conf:rw
      - ./srv_web/nginx.conf:/etc/nginx/nginx.conf:rw
    # Настройка маршрута, пользователей, SSH и nginx
    command: >
      sh -c "exec /bin/sh /start.sh"
    environment:
      - GATEWAY_IP=192.168.102.254
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - PETROVICH_HASH=${PETROVICH_HASH}
    dns: [ 192.168.103.24 ]

  srv_bunkerweb:
    image: bunkerity/bunkerweb-all-in-one:1.6.5
    container_name: srv_bunkerweb
    depends_on: [ fw ]
    cap_add: [ "NET_ADMIN" ]
    user: root
    restart: always    
    environment:
      - SERVICE_API="yes"
      - API_WHITELIST_IPS="127.0.0.0/8 192.168.102.0/24"
      - USE_REDIS="no"
      - GATEWAY_IP=192.168.102.254
      - ANSIBLE_HASH=${ANSIBLE_HASH}      
      # Optionally set an admin override token
      # API_TOKEN: "changeme"
    volumes:
      - ./srv_bunkerweb/data:/data
      - ./srv_bunkerweb/start.sh:/start.sh:ro
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw        
    dns: [ 192.168.103.24 ]
    entrypoint: ["/bin/sh", "/start.sh"] 
    networks:
      dmz_net:
        ipv4_address: 192.168.102.14
     
  pc_petrovich:
    # user: petrovich
    hostname: pc_petrovich
    depends_on: [ fw ]
    build: ./app_empty
    container_name: pc_petrovich
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      users_net:
        ipv4_address: 192.168.101.2
    environment:
      - PETROVICH_HASH=${PETROVICH_HASH}
      - USERNAME=petrovich
      - GATEWAY_IP=192.168.101.254
      - ANSIBLE_HASH=${ANSIBLE_HASH}
    volumes:
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw    
    dns: [ 192.168.103.24 ]    

  pc_boss:
    # user: boss
    hostname: pc_boss
    depends_on: [ fw ]
    build: ./app_empty
    container_name: pc_boss
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      users_net:
        ipv4_address: 192.168.101.4
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - BOSS_HASH=${BOSS_HASH}
      - USERNAME=boss
      - GATEWAY_IP=192.168.101.254
    volumes:
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw      
    dns: [ 192.168.103.24 ]

  pc_trust:
    # user: trust 
    hostname: pc_trust
    depends_on: [ fw ]
    build: ./app_empty
    container_name: pc_trust
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      users_net:
        ipv4_address: 192.168.101.5
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - TRUST_HASH=${TRUST_HASH}
      - GATEWAY_IP=192.168.101.254    
      - USERNAME=trust  
    volumes:
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw      
    dns: [ 192.168.103.24 ]

  pc_banna:
    hostname: pc_banna
    # user: b.anna 
    depends_on: [ fw, srv_samba]
    build: ./pc_banna
    container_name: pc_banna
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    devices:
      - /dev/fuse
    security_opt:
      - apparmor:unconfined    
    restart: always
    networks:
      users_net:
        ipv4_address: 192.168.101.3
    volumes:
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - B_ANNA_HASH=${B_ANNA_HASH}
      - SAMBA_USER=${SAMBA_USER}
      - SAMBA_PASSWORD=${SAMBA_PASSWORD}
      - GATEWAY_IP=192.168.101.254          
    dns: [ 192.168.103.24 ]
    # для мониторования шар автоматического (иначе не удалось добиться):
    privileged: true
  
  pc_bastion:
    depends_on: [ fw ]
    build: ./pc_bastion
    container_name: pc_bastion
    hostname: pc_bastion
    restart: always
    cap_add: [ "NET_ADMIN" ]    
    networks:
      admin_net:
        ipv4_address: 192.168.104.2
    environment:
      - GATEWAY_IP=192.168.104.254
      - B_ANNA_HASH=${B_ANNA_HASH}
      - PETROVICH_HASH=${PETROVICH_HASH}
      - TRUST_HASH=${TRUST_HASH}
      - ANSIBLE_HASH=${ANSIBLE_HASH}      
    volumes:
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw
    dns: [ 192.168.103.24 ]
    tty: true

  srv_mail:
    depends_on: [ fw ]
    build: ./srv_mail
    container_name: srv_mail
    hostname: srv_mail
    domainname: darkstore.local
    shm_size: "256m"
    restart: always
    cap_add: [ "NET_ADMIN" ]    
    networks:
      dmz_net:
        ipv4_address: 192.168.102.20
    # no host port publishing; access via fw DNAT
    environment:
      # Hostname/FQDN
      - DMS_HELO_NAME=mail.darkstore.local
      # Enable core filtering stack
      - ENABLE_RSPAMD=1
      - ENABLE_CLAMAV=1
      - ENABLE_POSTSCREEN=0
      - POSTSCREEN_ACTION=ignore
      - ENABLE_DNSBL=0
      - PERMIT_DOCKER=connected-networks
      # DKIM auto-generation for darkstore.local
      - ENABLE_OPENDKIM=1
      - DKIM_AUTOGENERATE=1
      - DKIM_SELECTOR=mail
      # IMAP/POP internal only (no host port publishing)
      - ENABLE_IMAP=1
      - ENABLE_POP3=1
      # Disable TLS (lab only) вЂ“ see postfix/dovecot overrides in config
      - SSL_TYPE=manual
      - SSL_CERT_PATH=/tmp/docker-mailserver/ssl/cert.pem
      - SSL_KEY_PATH=/tmp/docker-mailserver/ssl/key.pem
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - RSPAMD_PASSWORD=${ANSIBLE_HASH}
      - GATEWAY_IP=192.168.102.254      
    volumes:
      - ./srv_mail/config/:/tmp/docker-mailserver/
      - ./srv_mail/amavis/50-user:/etc/amavis/conf.d/50-user:rw
      - ./srv_mail/rspamd/:/tmp/docker-mailserver/rspamd/
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw     
    dns: [ 192.168.103.24 ]
    
  srv_ansible:
    hostname: srv_ansible
    depends_on: [ fw ]
    build: ./srv_ansible
    container_name: srv_ansible
    cap_add: [ "NET_ADMIN" ]
    #user: root
    restart: always
    networks:
      servers_net:
        ipv4_address: 192.168.103.21
    volumes:
      - ./srv_ansible/ansible.cfg:/etc/ansible/ansible.cfg:rw
      - ./srv_ansible/logs/ansible_runner.log:/var/log/ansible_runner.log:rw
      - ./srv_ansible/ansible/:/workspace:rw
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw                 
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - PETROVICH_HASH=${PETROVICH_HASH}
      - GATEWAY_IP=192.168.103.254
      - SAMBA_USER=${SAMBA_USER}
      - SAMBA_PASSWORD=${SAMBA_PASSWORD}
    
  srv_samba:
    hostname: srv_samba
    depends_on: [ fw ]
    build: ./srv_samba
    container_name: srv_samba
    cap_add: [ "NET_ADMIN" ]
    restart: always
    #user: root
    networks:
      servers_net:
        ipv4_address: 192.168.103.22
    volumes:
      - ./samba/share:/share
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw
      - ./srv_samba/etc/samba/smb.conf:/etc/samba/smb.conf:rw
    environment:
      - ANSIBLE_HASH=${ANSIBLE_HASH}
      - SAMBA_USER=${SAMBA_USER}
      - SAMBA_PASSWORD=${SAMBA_PASSWORD}
      - SAMBA_SHARE_NAME=${SAMBA_SHARE_NAME}
      - GATEWAY_IP=192.168.103.254
    dns: [ 192.168.103.24 ]
    
  srv_dns:
    hostname: srv_dns
    depends_on: [ fw ]
    build: ./srv_dns
    container_name: srv_dns
    cap_add: [ "NET_ADMIN" ]
    restart: always
    networks:
      servers_net:
        ipv4_address: 192.168.103.24
    volumes:
      - ./srv_dns/Corefile:/etc/coredns/Corefile:ro
      - ./srv_dns/darkstore.local.db:/etc/coredns/darkstore.local.db:ro
      - ./ansible_agent_deploy.sh:/usr/local/bin/ansible_agent_deploy.sh:rw      
    environment:
      - GATEWAY_IP=192.168.103.254
      - ANSIBLE_HASH=${ANSIBLE_HASH}      
    expose:
      - "53"
      - "53/udp"

volumes:
  bw-data:

networks:
  uplink_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.33.0.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-uplink
  nat_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.99.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-nat
  users_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.101.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-users
  dmz_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.102.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-dmz
  servers_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.103.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-servers
  admin_net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.104.0/24
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.name: br-admin
